x4 = data.frame(Time=seq(1,500,length=100),y1=sin(x)+rnorm(100,sd=0.1))
#x4 = melt(x4)
ggplot(x4, aes(x=Time, y=y1)) + geom_line(size=2) + theme_thesis() + theme(legend.position = "None") + ylab("") + xlab("")
x4 = data.frame(Time=seq(1,500,length=100),'Cell 1'=sin(x)+rnorm(100,sd=0.1), y2)
x4 = data.frame(Time=seq(1,500,length=100),'Cell 1'=sin(x)+rnorm(100,sd=0.1), 'Cell 2'=sin(x)+rnorm(100,sd=0.1), 'Cell 3'=sin(x)+rnorm(100,sd=0.1))
x4 = melt(x4, measure=2:4)
x4
ggplot(x4, aes(x=Time, y=y1)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
sd1 = 0.2
x4 = data.frame(Time=seq(1,500,length=100),'Cell 1'=sin(x)+rnorm(100,sd=sd1), 'Cell 2'=sin(x)+rnorm(100,sd=sd1), 'Cell 3'=sin(x)+rnorm(100,sd=sd1))
x4 = melt(x4, measure=2:4)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
sd1 = 0.5
x4 = data.frame(Time=seq(1,500,length=100),'Cell 1'=sin(x)+rnorm(100,sd=sd1), 'Cell 2'=sin(x)+rnorm(100,sd=sd1), 'Cell 3'=sin(x)+rnorm(100,sd=sd1))
x4 = melt(x4, measure=2:4)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
sd1 = 0.5
x4 = data.frame(Time=seq(1,500,length=100),'Cell 1'=sin(x)+rnorm(100,sd=sd1), 'Cell 2'=sin(x)+rnorm(100,sd=sd1), 'Cell 3'=sin(x)+rnorm(100,sd=sd1))
x4[,2:4] = (x4[,2:4] - min(x4[,2:4])) / (max(x4[,2:4])-min(x4[,2:4]))
x4 = melt(x4, measure=2:4)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
?melt
sd1 = 0.5
x4 = data.frame(Time=seq(1,500,length=100),'Cell-1'=sin(x)+rnorm(100,sd=sd1), 'Cell-2'=sin(x)+rnorm(100,sd=sd1), 'Cell-3'=sin(x)+rnorm(100,sd=sd1))
x4[,2:4] = (x4[,2:4] - min(x4[,2:4])) / (max(x4[,2:4])-min(x4[,2:4]))
x4 = melt(x4, measure=2:4)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
x4$Average = mean(x4[,2:4])
x4 = data.frame(Time=seq(1,500,length=100),'Cell1'=sin(x)+rnorm(100,sd=sd1), 'Cell2'=sin(x)+rnorm(100,sd=sd1), 'Cell3'=sin(x)+rnorm(100,sd=sd1))
x4$Average = mean(x4[,2:4])
h(x4)
x4[,2:4]
x4$Average = apply(x4[,2:4],1,mean)
x4[,-1] = (x4[,-1] - min(x4[,-1)) / (max(x4[,-1])-min(x4[,-1]))
x4[,-1] = (x4[,-1] - min(x4[,-1])) / (max(x4[,-1])-min(x4[,-1]))
x4 = melt(x4, measure=2:4)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
sd1 = 0.5
x4 = data.frame(Time=seq(1,500,length=100),'Cell1'=sin(x)+rnorm(100,sd=sd1), 'Cell2'=sin(x)+rnorm(100,sd=sd1), 'Cell3'=sin(x)+rnorm(100,sd=sd1))
x4$Average = apply(x4[,2:4],1,mean)
x4[,-1] = (x4[,-1] - min(x4[,-1])) / (max(x4[,-1])-min(x4[,-1]))
x4 = melt(x4, measure=2:5)
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=2) + theme_thesis() + ylab("") + xlab("")
x4$Size = c(rep(1,300), rep(2,100))
x4$Size = c(rep(1,300), rep(2,100))
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size)) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size,guide="none")) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(size=Size) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size,show_guide=FALSE)) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size),show_guide=FALSE) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size)) + theme_thesis() + ylab("") + xlab("")
ggplot(x4, aes(x=Time, y=value, group=variable, color=variable)) + geom_line(aes(size=Size)) + theme_thesis() + ylab("") + xlab("") + scale_size(guide="none")
diff
dif
i=2
x=c(rep(NA,dif),x4[,i])
dif=10
x=c(rep(NA,dif),x4[,i])
x4 = data.frame(Time=seq(1,500,length=100),'Cell1'=sin(x)+rnorm(100,sd=sd1), 'Cell2'=sin(x)+rnorm(100,sd=sd1), 'Cell3'=sin(x)+rnorm(100,sd=sd1))
x = seq(1,20,length=100)
sd1 = 0.5
x4 = data.frame(Time=seq(1,500,length=100),'Cell1'=sin(x)+rnorm(100,sd=sd1), 'Cell2'=sin(x)+rnorm(100,sd=sd1), 'Cell3'=sin(x)+rnorm(100,sd=sd1))
x=c(rep(NA,dif),x4[,i])
x
rm(list=ls())
.libPaths()
library(dplyr)
.libPaths()
?install.packages()
library(plyr)
library(dplyr)
?arrange
methods(arrange)
.libPaths()
ls()
.libPaths()
remove.packages("reshape")
.libPaths()
?.libPaths()
library("limma", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
h()
?h()
search()
.libPaths()
.libPaths("/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
.libPaths()
update.packages()
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages()
update.packages()
.libpaths()
.libPaths()
.libPaths()
install.packages(c("boot", "class", "e1071", "evaluate", "foreign", "httr", "KernSmooth", "ks", "MASS", "nlme", "nnet", "rpart", "spatial", "WriteXLS"))
install.packages(c("e1071", "evaluate", "foreign", "httr", "KernSmooth", "ks", "MASS", "nlme", "nnet", "rpart", "spatial", "WriteXLS"))
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
.libPaths("/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
.libPaths()
install.packages(c("class", "evaluate", "httr", "KernSmooth", "ks", "MASS", "nlme", "nnet", "rpart", "spatial", "WriteXLS"))
remove.packages("BayesFit")
update.packages()
update.packages()
?update.packages
R.Version
R.Version()
.libPaths()
.libPaths()
h()
.libPaths()
.libPaths()
source("http://bioconductor.org/biocLite.R")
biocLite("CellNOptR")
install.packages("XML")
source("http://bioconductor.org/biocLite.R")
biocLite()
?library()
?library
.libPaths()
?.libPaths()
update.packages()
.libPaths()
.libPaths(/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
.libPaths("/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
.libPaths()
.libPaths(new)
.Library.site
.Library.site()
.Library.site
.Library
.libPaths(.libPaths()[1])
.libPaths()
.Library
.Library.site
.libPaths()
?.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(knitr)
library(knitr)
library(devtools)
install_github("yihui/knitr")
detach("package:knitr", unload=TRUE)
kmeans_cluster <- function(dataset) {
require(shiny)
shinyApp(
ui = fluidPage(responsive = FALSE,
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('xcol', 'X Variable', names(dataset))),
column(4, selectInput('ycol', 'Y Variable', names(dataset),
selected=names(dataset)[[2]])),
column(4, numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9))
),
fluidRow(
plotOutput('kmeans', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
dataset[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$kmeans <- renderPlot(height = 400, {
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
}
rm(kmeans_cluster)
```{r, echo = FALSE}
library(rmdexamples)
kmeans_cluster(iris)
```
install.packages("rmdexamples")
library(rmdexamples)
library(devtools)
install_github("rstudio/rmdexamples")
library(shiny)
install_github("rstudio/shiny")
install_github("rstudio/rmdexamples")
devtools::install_github(c("rstudio/htmltools", "yihui/knitr", "rstudio/shiny"))
devtools::install_github("rstudio/rmdexamples")
library(MEIGOR)
library(CNORode)
data("simpleExample", package="MEIGOR")
plotCNOlist(cnolist)
plotModel(model, cnolist)
initial_pars = createLBodeContPars(model, LB_n=1, LB_k=0.1,
LB_tau=0.01, UB_n=5, UB_k=0.9, UB_tau=10, random=TRUE)
simData = plotLBodeFitness(cnolist, model, initial_pars,
reltol=1e-05, atol=1e-03, maxStepSize=0.01)
f_bayesFit <- function(position, params=initial_pars,                         exp_var=opts$exp_var) {        # convert from log    params$parValues = 10^position    ysim = getLBodeDataSim(cnolist=cnolist, model=model,                           ode_parameters=params)    data_as_vec = unlist(cnolist$valueSignals)    sim_as_vec = unlist(ysim)        # set nan (NAs) to 0    sim_as_vec[is.na(sim_as_vec)] = 0    sim_as_vec[is.nan(sim_as_vec)]= 0    return(sum((data_as_vec-sim_as_vec)^2/(2*exp_var^2)))  }
opts <- list("model"=NULL, "estimate_params"=NULL,"initial_values"=NULL,               "tspan"=NULL, "step_fn"=NULL, "likelihood_fn"=NULL,               "prior_fn"=NULL, "nsteps"=NULL, "use_hessian"=FALSE,               "rtol"=NULL, "atol"=NULL, "norm_step_size"=0.75,               "hessian_period"=25000, "hessian_scale"=0.085,               "sigma_adj_interval"=NULL, "anneal_length"=NULL,               "T_init"=10, "accept_rate_target"=0.3, "sigma_max"=1,               "sigma_min"=0.25, "sigma_step"=0.125, "thermo_temp"=1, "seed"=NULL)opts$nsteps = 2000opts$likelihood_fn = f_bayesFitopts$use_hessian = TRUEopts$hessian_period = opts$nsteps/10opts$model = list(parameters=list(name=initial_pars$parNames,                                  value=initial_pars$parValues))opts$estimate_params = initial_pars$parValuesopts$exp_var = 0.01
rm(list=ls())
data("simpleExample", package="MEIGOR")
plotCNOlist(cnolist)
plotModel(model, cnolist)
initial_pars = createLBodeContPars(model, LB_n=1, LB_k=0.1,
LB_tau=0.01, UB_n=5, UB_k=0.9, UB_tau=10, random=TRUE)
simData = plotLBodeFitness(cnolist, model, initial_pars,
reltol=1e-05, atol=1e-03, maxStepSize=0.01)
opts <- list("model"=NULL, "estimate_params"=NULL,"initial_values"=NULL,               "tspan"=NULL, "step_fn"=NULL, "likelihood_fn"=NULL,               "prior_fn"=NULL, "nsteps"=NULL, "use_hessian"=FALSE,               "rtol"=NULL, "atol"=NULL, "norm_step_size"=0.75,               "hessian_period"=25000, "hessian_scale"=0.085,               "sigma_adj_interval"=NULL, "anneal_length"=NULL,               "T_init"=10, "accept_rate_target"=0.3, "sigma_max"=1,               "sigma_min"=0.25, "sigma_step"=0.125, "thermo_temp"=1, "seed"=NULL)
opts <- list("model"=NULL, "estimate_params"=NULL,"initial_values"=NULL,
"tspan"=NULL, "step_fn"=NULL, "likelihood_fn"=NULL,
"prior_fn"=NULL, "nsteps"=NULL, "use_hessian"=FALSE,
"rtol"=NULL, "atol"=NULL, "norm_step_size"=0.75,
"hessian_period"=25000, "hessian_scale"=0.085,
"sigma_adj_interval"=NULL, "anneal_length"=NULL,
"T_init"=10, "accept_rate_target"=0.3, "sigma_max"=1,
"sigma_min"=0.25, "sigma_step"=0.125, "thermo_temp"=1, "seed"=NULL)
f_bayesFit <- function(position, params=initial_pars,
exp_var=opts$exp_var) {
# convert from log
params$parValues = 10^position
ysim = getLBodeDataSim(cnolist=cnolist, model=model,
ode_parameters=params)
data_as_vec = unlist(cnolist$valueSignals)
sim_as_vec = unlist(ysim)
# set nan (NAs) to 0
sim_as_vec[is.na(sim_as_vec)] = 0
sim_as_vec[is.nan(sim_as_vec)]= 0
return(sum((data_as_vec-sim_as_vec)^2/(2*exp_var^2)))
}
opts$nsteps = 50
opts$likelihood_fn = f_bayesFit
opts$use_hessian = TRUE
opts$hessian_period = opts$nsteps/10
opts$model = list(parameters=list(name=initial_pars$parNames,
value=initial_pars$parValues))
opts$estimate_params = initial_pars$parValues
opts$exp_var = 0.01
res = runBayesFit(opts)
prior_mean = log10(initial_pars$parValues)
prior_var = 10
res = runBayesFit(opts)
opts$nsteps = 1000
opts$likelihood_fn = f_bayesFit
opts$use_hessian = TRUE
opts$hessian_period = opts$nsteps/10
opts$model = list(parameters=list(name=initial_pars$parNames,
value=initial_pars$parValues))
opts$estimate_params = initial_pars$parValues
res = runBayesFit(opts)
opts <- list("model"=NULL, "estimate_params"=NULL,"initial_values"=NULL,
"tspan"=NULL, "step_fn"=NULL, "likelihood_fn"=NULL,
"prior_fn"=NULL, "nsteps"=NULL, "use_hessian"=FALSE,
"rtol"=NULL, "atol"=NULL, "norm_step_size"=0.75,
"hessian_period"=25000, "hessian_scale"=0.085,
"sigma_adj_interval"=NULL, "anneal_length"=NULL,
"T_init"=10, "accept_rate_target"=0.3, "sigma_max"=1,
"sigma_min"=0.25, "sigma_step"=0.125, "thermo_temp"=1, "seed"=NULL)
opts <- list("model"=NULL, "estimate_params"=NULL,"initial_values"=NULL,               "tspan"=NULL, "step_fn"=NULL, "likelihood_fn"=NULL,               "prior_fn"=NULL, "nsteps"=NULL, "use_hessian"=FALSE,               "rtol"=NULL, "atol"=NULL, "norm_step_size"=0.75,               "hessian_period"=25000, "hessian_scale"=0.085,               "sigma_adj_interval"=NULL, "anneal_length"=NULL,               "T_init"=10, "accept_rate_target"=0.3, "sigma_max"=1,               "sigma_min"=0.25, "sigma_step"=0.125, "thermo_temp"=1, "seed"=NULL)
list
help
demo()
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
demo()
demo("centrality")
install.packages("~/Downloads/SpatialPRo_0.1.tar.gz", repos = NULL, type = "source")
library("SpatialPRo", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(SpatialPRo)
data(SPE)
data()
data(spe)
SPE
data(sp5)
detach("package:SpatialPRo", unload=TRUE)
library("SpatialPRo", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data(sp5)
rm(lsit=ls())
rm(list=ls())
library(SpatialPRo)
data(SPE)
data(spe)
SPE
IDs(spe)
IDs(SPE)
hist(rnorm(100))
hist(rnorm(100000))
hist(rnorm(1000000))
hist(rnorm(10000000))
hist(rnorm(10000000), breaks=100)
library("CNORdt", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(CellNOptR)
library(CNORdt)
data(CNOlistPB, package="CNORdt")
data(modelPB, package="CNORdt")
# pre-process model
model = preprocessing(CNOlistPB, modelPB)
# optimise
initBstring <- rep(1, length(model$reacID))
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
plotModel(model)
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
+                    verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
initBstring <- rep(1, length(model$reacID))
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
library("CNORdt", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data(CNOlistPB, package="CNORdt")
data(modelPB, package="CNORdt")
# pre-process model
model = preprocessing(CNOlistPB, modelPB)
# optimise
initBstring <- rep(1, length(model$reacID))
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
opt1$results
names(opt1$results)
x = opt1$results
x[1,]
0.02 * 10^6
library(CNORdt)
data(CNOlistPB, package="CNORdt")
data(modelPB, package="CNORdt")
# pre-process model
model = preprocessing(CNOlistPB, modelPB)
# optimise
initBstring <- rep(1, length(model$reacID))
opt1 <- gaBinaryDT(CNOlist=CNOlistPB, model=model, initBstring=initBstring,
verbose=TRUE, boolUpdates=10, maxTime=30, lowerB=0.8, upperB=10)
?gaBinaryTN
opt1$results[1,]
rm(list=ls())
x = matrix(rep(1,10),nrow=1)
x = matrix(rep(1,10),ncol=1)
xx = matrix(rep(1,10),nrow=1)
x
xx
xx * x
xx %*% x
x = matrix(1:4,nrow=2)
x %8% x
x %*% x
x
x = matrix(rep(1,10),ncol=1)
t(x)
t(x)%*%x
rm(list=ls())
library(desolve)
library(deSolve)
11595.45 + 665.92
x =11595.45 + 665.92
12500 - x
rm(x)
x = 1:10
y <- function(x) {3*x^2 + 4*x + 4}
y(x)
plot(x,y,type="l")
plot(x,y(x),type="l")
x = -10:10
plot(x,y(x),type="l")
yy = function(x) {6*x + 4}
points(x,yy(x),type="l")
plot(x,y(x),type="l", ylim=c(-100,400))
points(x,yy(x),type="l",color=2)
points(x,yy(x),type="l",col=2)
plot(x,y(x),type="l", ylim=c(-100,400))
points(x,yy(x),type="l",col=2)
?with
yini <- c(y=0)derivs <- function(t, y, parms)  list(3*y+4)
yini <- c(y=0)
derivs <- function(t, y, parms)
list(3*y+4)
derivs
derivs <- function(t, y)
list(3*y+4)
times <- seq(from=-10, to=10, by=1)
out <- ode(y=yini, times=times, func=derivs, parms=NULL)
out <- ode(y=yini, times=times, func=derivs)
yini <- c(y=0)
derivs <- function(t, y, parms=NULL)
list(3*y+4)
times <- seq(from=-10, to=10, by=1)
out <- ode(y=yini, times=times, func=derivs, parms=NULL)
head(out, n = 3)
out
plot(out[,1], out[,2])
yini <- c(y=0)
derivs <- function(t, y, parms=NULL)
list(6*y+4)
times <- seq(from=-10, to=10, by=1)
out <- ode(y=yini, times=times, func=derivs, parms=NULL)
plot(x,y(x),type="l", ylim=c(-100,400))
points(x,yy(x),type="l",col=2)
points(x, out[,2], col=3)
points(x,yy(x),type="l",col=2)
out
out
plot(out[,1], out[,2])
plot(out[,1], out[,2], type="l")
plot(out[,1], log(out[,2]), type="l")
d <- function(t, states, parms) {  with(as.list(c(states, parms),{    d_1 <- 6*v_1 + 4,    d_2 <- 1    list(c(d_1, d_2))  })}
d <- function(t, states, parms) {  with(as.list(c(states, parms),{    d_1 <- 6*v_1 + 4    d_2 <- 1    list(c(d_1, d_2))  })}
d <- function(t, states, parms) {  with(as.list(c(states, parms)),{    d_1 <- 6*v_1 + 4    d_2 <- 1    list(c(d_1, d_2))  })}
d <- function(t, states, parms) {  with(as.list(c(states, parms)),{    d_1 <- 6*v_2 + 4    d_2 <- 1    list(c(d_1, d_2))  })}
derivs <- function(t, state, parameters) {  with(as.list(c(state, parameters)),{    d_1 <- 6*v_2 + 4    d_2 <- 1    list(c(d_1, d_2))  })}
pi3kAct <- function(t, state, parameters) {  with(as.list(c(state, parameters)),{    d_SH2 <- kz1 - kfz3*P110*SH2    d_P110 <- -kfz3*P110*SH2    d_PI3K <- kfz3*P110*SH2    list(c(d_SH2, d_P110, d_PI3K))  })}
pi3kAct <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
d_SH2 <- kz1 - kfz3*P110*SH2
d_P110 <- -kfz3*P110*SH2
d_PI3K <- kfz3*P110*SH2
list(c(d_SH2, d_P110, d_PI3K))
})
}
pi3kAct <- function(t, state, parameters) {  with(as.list(c(state, parameters)),{    d_1 <- 6*v_2 + 4    d_2 <- 1    list(c(d_1, d_2))  })}
pi3kAct <- function(t, state, parameters) {  with(as.list(c(state, parameters)),{    d_SH2 <- kz1 - kfz3*P110*SH2    d_P110 <- -kfz3*P110*SH2    d_PI3K <- kfz3*P110*SH2    list(c(d_SH2, d_P110, d_PI3K))  })}
rm(list=ls())
pi3kAct <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
d_SH2 <- kz1 - kfz3*P110*SH2
d_P110 <- -kfz3*P110*SH2
d_PI3K <- kfz3*P110*SH2
list(c(d_SH2, d_P110, d_PI3K))
})
}
pi3kAct <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
d_SH2 <- kz1 - kfz3*P110*SH2
d_P110 <- -kfz3*P110*SH2
d_PI3K <- kfz3*P110*SH2
list(c(d_SH2, d_P110, d_PI3K))
})
}
deriv
derivs <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
d_1 = 6*v_2 + 4
d_2 = 1
list(c(d_1, d_2))
})
}
library("deSolve", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
s1 = c(v_1=0, v_2=0)
t = seq(from=-10, to=10)
t
out = ode(y=s1, times=t, func=derivs, parms=NULL)
out
s1 = c(v_1=0, v_2=-10)
t = seq(from=-10, to=10)
out = ode(y=s1, times=t, func=derivs, parms=NULL)
out
plot(out[,1], out[,2], type="l")
rm(list=ls())
a = matrix(1:4,nrow=2)
solve(a)
determinant(a)
solve(a) %*% a
eigen(a)
rm(a)
A = matrix(c(2,-1,0,4),nrow=2)
A
D = diag(A)
D
D_1 = solve(D)
D = matrix(c(2,0,0,4), nrow=2)
D_1 = solve(D)
D_1
L = D_1 %*% A
L
match?
?match
a = c("1","2")
b = c("2","3","1")
match(a,b)
1249*7
setwd("~/Documents/workspace/svn2/sysbiomed/trunk/pip3bayes/R")
require(reshape2)
require(plyr)
require(gridExtra)
post_1 = read.csv("figure_data/data_11.csv")
post_2 = read.csv("figure_data/data_13.csv")
post_1$Group = "Exper 1"
# post_1$Label = paste("Replicate ",post_1$Experiment,","," Cell ",post_1$Run,sep="")
post_2$Group = "Exper 1/2"
postAll = rbind(post_1,post_2)
ggplot(post_1, aes(x=Value)) + geom_density(alpha=0.5) + theme_thesis(12) + facet_wrap(~Label, ncol=4, scales="free") + geom_vline(aes(xintercept=Best), color="red") + xlab("PTEN") + ylab("")
mean_1 = ddply(post_1, .(Experiment, Run), summarize, SD=sd(Value), Mean=mean(Value))
mean_2 = ddply(post_2, .(Experiment, Run), summarize, SD=sd(Value), Mean=mean(Value))
mean_1 = mean_1[-12,] # take out replicate 3, run 7
mean_2 = mean_2[-12,]
meanAll = cbind(mean_1[,-3], mean_2[,4])
names(meanAll)[3:4] = c("Exper 1", "Exper 1/2")
meanAll = melt(meanAll, measure=3:4)
ggplot(meanAll, aes(variable,value)) + geom_boxplot() + theme_thesis() + xlab("") + ylab(expression(k[f])) + theme(axis.title.y=element_text(angle=0, vjust=0.5))
mean_1$SD
mean(mean_1$SD)
mean(mean_2$SD)
mean(mean_1$Mean)
t.test(mean_1$Mean, mean_2$Mean)
